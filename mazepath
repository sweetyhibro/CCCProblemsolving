#include <stdio.h>
#include <stdlib.h>

#define MAX 100 // Maximum size for the maze

int isSafe(int M[MAX][MAX], int r, int c, int N) {
    return (r >= 0 && r < N && c >= 0 && c < N && M[r][c] == 1);
}

int findPath(int M[MAX][MAX], int sol[MAX][MAX], int r, int c, int N) {
    if (r == N - 1 && c == N - 1) {
        sol[r][c] = 1;
        return 1;
    }
    if (isSafe(M, r, c, N)) {
        sol[r][c] = 1;
        if (findPath(M, sol, r, c + 1, N)) return 1;
        if (findPath(M, sol, r + 1, c, N)) return 1;
        sol[r][c] = 0;
        return 0;
    }
    return 0;
}

void printSolution(int sol[MAX][MAX], int N) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf(" %d ", sol[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int N;
    printf("Enter the size of the maze (N x N): ");
    scanf("%d", &N);

    if (N > MAX) {
        printf("Size too large. Maximum size allowed is %d.\n", MAX);
        return 1;
    }

    int M[MAX][MAX], sol[MAX][MAX];
    printf("Enter the maze matrix (%d x %d) with 1s and 0s:\n", N, N);
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            scanf("%d", &M[i][j]);
        }
    }

    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            sol[i][j] = 0;
        }
    }

    if (findPath(M, sol, 0, 0, N)) {
        printf("Path found:\n");
        printSolution(sol, N);
    } else {
        printf("No path exists\n");
    }

    return 0;
}
