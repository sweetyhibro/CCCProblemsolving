#include <stdio.h>
#include <stdlib.h>

struct Item {
    int weight, profit;
    float ratio;
};

int cmp(const void *a, const void *b) {
    struct Item *itemA = (struct Item *)a;
    struct Item *itemB = (struct Item *)b;
    if (itemB->ratio > itemA->ratio) return 1;
    else if (itemB->ratio < itemA->ratio) return -1;
    return 0;
}

void fractionalKnapsack(struct Item items[], int n, int capacity) {
    qsort(items, n, sizeof(struct Item), cmp);

    int currentWeight = 0;
    float totalProfit = 0.0;

    for (int i = 0; i < n; i++) {
        if (currentWeight + items[i].weight <= capacity) {
            currentWeight += items[i].weight;
            totalProfit += items[i].profit;
        } else {
            int remainingWeight = capacity - currentWeight;
            totalProfit += items[i].profit * ((float) remainingWeight / items[i].weight);
            break;
        }
    }

    printf("Total profit: %.2f\n", totalProfit);
}

int main() {
    int n, capacity;
    printf("Enter the number of items: ");
    scanf("%d", &n);
    struct Item items[n];
    printf("Enter the weight and profit of each item:\n");
    for (int i = 0; i < n; i++) {
        printf("Item %d:\n", i + 1);
        printf("Weight: ");
        scanf("%d", &items[i].weight);
        printf("Profit: ");
        scanf("%d", &items[i].profit);
        items[i].ratio = (float)items[i].profit / items[i].weight;
    }
    printf("Enter the capacity of the knapsack: ");
    scanf("%d", &capacity);

    fractionalKnapsack(items, n, capacity);

    return 0;
}
